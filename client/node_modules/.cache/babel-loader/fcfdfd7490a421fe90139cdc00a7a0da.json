{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samri\\\\creator\\\\creator\\\\client\\\\src\\\\components\\\\UptimeGraph.js\";\nimport React from 'react';\nimport { Doughnut } from 'react-chartjs-2'; // Changed from Line to Doughnut\nimport { Chart as ChartJS, ArcElement,\n// Needed for Doughnut chart\nTitle, Tooltip, Legend } from 'chart.js';\n\n// Registering the necessary parts of Chart.js for a Doughnut chart\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement,\n// Register ArcElement for Doughnut\nTooltip, Legend, Title);\nconst UptimeGraph = _ref => {\n  let {\n    serviceData\n  } = _ref;\n  // Calculate current overall operational percentage based on direct service objects\n  const totalServices = serviceData ? serviceData.length : 0;\n  // Filter for services explicitly 'Operational'\n  const operationalServices = serviceData ? serviceData.filter(s => s.status === 'Operational').length : 0;\n  const currentUptimePercentage = totalServices > 0 ? operationalServices / totalServices * 100 : 0;\n  const downtimePercentage = 100 - currentUptimePercentage;\n\n  // Data for the Doughnut chart\n  const data = {\n    labels: ['Operational', 'Non-Operational'],\n    // Labels for the segments\n    datasets: [{\n      data: [currentUptimePercentage, downtimePercentage],\n      // Uptime and Downtime percentages\n      backgroundColor: ['rgba(75, 192, 192, 0.8)',\n      // Color for Operational (teal/greenish)\n      'rgba(255, 99, 132, 0.8)' // Color for Non-Operational (red)\n      ],\n\n      borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],\n      borderWidth: 1\n    }]\n  };\n\n  // Options for the Doughnut chart\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    // Allows the chart to fill its container\n    cutout: '70%',\n    // Adjusts the size of the hole in the doughnut\n    plugins: {\n      legend: {\n        position: 'bottom',\n        // Move legend to bottom for cleaner look\n        labels: {\n          font: {\n            size: 14\n          }\n        }\n      },\n      title: {\n        display: true,\n        text: 'Overall System Status',\n        // More direct title\n        font: {\n          size: 18,\n          weight: 'bold'\n        },\n        padding: {\n          top: 10,\n          bottom: 20\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed !== null) {\n              label += context.parsed.toFixed(2) + '%'; // Format as percentage\n            }\n\n            return label;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-6 rounded-lg shadow-md mb-8 flex flex-col items-center\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-4 text-gray-800\",\n      children: \"Service Uptime Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), serviceData && serviceData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative h-64 w-64 md:h-80 md:w-80 flex items-center justify-center\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute text-3xl font-bold text-gray-800\",\n        children: [currentUptimePercentage.toFixed(1), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-500 py-10\",\n      children: \"No service data available to display uptime graph. Ensure services are created. For historical uptime trends, backend changes to store timestamps are needed.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_c = UptimeGraph;\nexport default UptimeGraph;\nvar _c;\n$RefreshReg$(_c, \"UptimeGraph\");","map":{"version":3,"names":["React","Doughnut","Chart","ChartJS","ArcElement","Title","Tooltip","Legend","register","UptimeGraph","serviceData","totalServices","length","operationalServices","filter","s","status","currentUptimePercentage","downtimePercentage","data","labels","datasets","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","cutout","plugins","legend","position","font","size","title","display","text","weight","padding","top","bottom","tooltip","callbacks","label","context","parsed","toFixed"],"sources":["C:/Users/Samri/creator/creator/client/src/components/UptimeGraph.js"],"sourcesContent":["import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2'; // Changed from Line to Doughnut\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement, // Needed for Doughnut chart\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Registering the necessary parts of Chart.js for a Doughnut chart\r\nChartJS.register(\r\n  ArcElement, // Register ArcElement for Doughnut\r\n  Tooltip,\r\n  Legend,\r\n  Title\r\n);\r\n\r\nconst UptimeGraph = ({ serviceData }) => {\r\n  // Calculate current overall operational percentage based on direct service objects\r\n  const totalServices = serviceData ? serviceData.length : 0;\r\n  // Filter for services explicitly 'Operational'\r\n  const operationalServices = serviceData ? serviceData.filter(s => s.status === 'Operational').length : 0;\r\n  \r\n  const currentUptimePercentage = totalServices > 0 ? (operationalServices / totalServices) * 100 : 0;\r\n  const downtimePercentage = 100 - currentUptimePercentage;\r\n\r\n  // Data for the Doughnut chart\r\n  const data = {\r\n    labels: ['Operational', 'Non-Operational'], // Labels for the segments\r\n    datasets: [\r\n      {\r\n        data: [currentUptimePercentage, downtimePercentage], // Uptime and Downtime percentages\r\n        backgroundColor: [\r\n          'rgba(75, 192, 192, 0.8)', // Color for Operational (teal/greenish)\r\n          'rgba(255, 99, 132, 0.8)',  // Color for Non-Operational (red)\r\n        ],\r\n        borderColor: [\r\n          'rgba(75, 192, 192, 1)',\r\n          'rgba(255, 99, 132, 1)',\r\n        ],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Options for the Doughnut chart\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false, // Allows the chart to fill its container\r\n    cutout: '70%', // Adjusts the size of the hole in the doughnut\r\n    plugins: {\r\n      legend: {\r\n        position: 'bottom', // Move legend to bottom for cleaner look\r\n        labels: {\r\n          font: {\r\n            size: 14\r\n          }\r\n        }\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Overall System Status', // More direct title\r\n        font: {\r\n          size: 18,\r\n          weight: 'bold'\r\n        },\r\n        padding: {\r\n            top: 10,\r\n            bottom: 20\r\n        }\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context) {\r\n            let label = context.label || '';\r\n            if (label) {\r\n              label += ': ';\r\n            }\r\n            if (context.parsed !== null) {\r\n              label += context.parsed.toFixed(2) + '%'; // Format as percentage\r\n            }\r\n            return label;\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow-md mb-8 flex flex-col items-center\"> {/* Center chart content */}\r\n      <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">Service Uptime Overview</h3>\r\n      {serviceData && serviceData.length > 0 ? (\r\n          <div className=\"relative h-64 w-64 md:h-80 md:w-80 flex items-center justify-center\"> {/* Container for Doughnut */}\r\n              <Doughnut data={data} options={options} />\r\n              {/* Manually display the overall percentage in the center for a gauge-like look */}\r\n              <div className=\"absolute text-3xl font-bold text-gray-800\">\r\n                {currentUptimePercentage.toFixed(1)}%\r\n              </div>\r\n          </div>\r\n      ) : (\r\n          <p className=\"text-center text-gray-500 py-10\">\r\n            No service data available to display uptime graph. Ensure services are created.\r\n            For historical uptime trends, backend changes to store timestamps are needed.\r\n          </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UptimeGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}