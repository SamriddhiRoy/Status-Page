{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samri\\\\creator\\\\creator\\\\client\\\\src\\\\components\\\\UptimeGraph.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Registering the necessary parts of Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n// The uptime graph component\nconst UptimeGraph = _ref => {\n  let {\n    serviceData\n  } = _ref;\n  // Function to calculate uptime percentage\n  const calculateUptime = serviceData => {\n    let operationalTime = 0;\n    let totalTime = 0;\n    serviceData.forEach((entry, index) => {\n      if (index > 0) {\n        const timeDiff = new Date(entry.timestamp) - new Date(serviceData[index - 1].timestamp);\n        totalTime += timeDiff;\n        if (entry.status === 'Operational') {\n          operationalTime += timeDiff;\n        }\n      }\n    });\n    const uptimePercentage = operationalTime / totalTime * 100;\n    return uptimePercentage.toFixed(2); // Rounds to two decimal points\n  };\n\n  const uptimeData = calculateUptime(serviceData);\n\n  // Chart.js data\n  const data = {\n    labels: ['Service Uptime'],\n    // Could be more dynamic depending on your data\n    datasets: [{\n      label: 'Uptime Percentage',\n      data: [uptimeData],\n      borderColor: 'rgba(75, 192, 192, 1)',\n      // Line color\n      fill: false\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Service Uptime\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_c = UptimeGraph;\nexport default UptimeGraph;\nvar _c;\n$RefreshReg$(_c, \"UptimeGraph\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","UptimeGraph","serviceData","calculateUptime","operationalTime","totalTime","forEach","entry","index","timeDiff","Date","timestamp","status","uptimePercentage","toFixed","uptimeData","data","labels","datasets","label","borderColor","fill"],"sources":["C:/Users/Samri/creator/creator/client/src/components/UptimeGraph.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Registering the necessary parts of Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\n// The uptime graph component\r\nconst UptimeGraph = ({ serviceData }) => {\r\n  // Function to calculate uptime percentage\r\n  const calculateUptime = (serviceData) => {\r\n    let operationalTime = 0;\r\n    let totalTime = 0;\r\n\r\n    serviceData.forEach((entry, index) => {\r\n      if (index > 0) {\r\n        const timeDiff = new Date(entry.timestamp) - new Date(serviceData[index - 1].timestamp);\r\n        totalTime += timeDiff;\r\n        if (entry.status === 'Operational') {\r\n          operationalTime += timeDiff;\r\n        }\r\n      }\r\n    });\r\n\r\n    const uptimePercentage = (operationalTime / totalTime) * 100;\r\n    return uptimePercentage.toFixed(2); // Rounds to two decimal points\r\n  };\r\n\r\n  const uptimeData = calculateUptime(serviceData);\r\n\r\n  // Chart.js data\r\n  const data = {\r\n    labels: ['Service Uptime'], // Could be more dynamic depending on your data\r\n    datasets: [\r\n      {\r\n        label: 'Uptime Percentage',\r\n        data: [uptimeData],\r\n        borderColor: 'rgba(75, 192, 192, 1)', // Line color\r\n        fill: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Service Uptime</h3>\r\n      <Line data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UptimeGraph;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;;AAEjB;AAAA;AACAP,OAAO,CAACQ,QAAQ,CACdP,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,CACP;;AAED;AACA,MAAME,WAAW,GAAG,QAAqB;EAAA,IAApB;IAAEC;EAAY,CAAC;EAClC;EACA,MAAMC,eAAe,GAAID,WAAW,IAAK;IACvC,IAAIE,eAAe,GAAG,CAAC;IACvB,IAAIC,SAAS,GAAG,CAAC;IAEjBH,WAAW,CAACI,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;MACpC,IAAIA,KAAK,GAAG,CAAC,EAAE;QACb,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACH,KAAK,CAACI,SAAS,CAAC,GAAG,IAAID,IAAI,CAACR,WAAW,CAACM,KAAK,GAAG,CAAC,CAAC,CAACG,SAAS,CAAC;QACvFN,SAAS,IAAII,QAAQ;QACrB,IAAIF,KAAK,CAACK,MAAM,KAAK,aAAa,EAAE;UAClCR,eAAe,IAAIK,QAAQ;QAC7B;MACF;IACF,CAAC,CAAC;IAEF,MAAMI,gBAAgB,GAAIT,eAAe,GAAGC,SAAS,GAAI,GAAG;IAC5D,OAAOQ,gBAAgB,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC;;EAED,MAAMC,UAAU,GAAGZ,eAAe,CAACD,WAAW,CAAC;;EAE/C;EACA,MAAMc,IAAI,GAAG;IACXC,MAAM,EAAE,CAAC,gBAAgB,CAAC;IAAE;IAC5BC,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,mBAAmB;MAC1BH,IAAI,EAAE,CAACD,UAAU,CAAC;MAClBK,WAAW,EAAE,uBAAuB;MAAE;MACtCC,IAAI,EAAE;IACR,CAAC;EAEL,CAAC;EAED,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAuB,eACvB,QAAC,IAAI;MAAC,IAAI,EAAEL;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAChB;AAEV,CAAC;AAAC,KAzCIf,WAAW;AA2CjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}