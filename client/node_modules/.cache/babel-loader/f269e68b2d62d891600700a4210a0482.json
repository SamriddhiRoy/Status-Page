{"ast":null,"code":"/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nconst toCamelCase = string => string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2) => p2 ? p2.toUpperCase() : p1.toLowerCase());\nconst toPascalCase = string => {\n  const camelCase = toCamelCase(string);\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n};\nconst mergeClasses = function () {\n  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {\n    classes[_key] = arguments[_key];\n  }\n  return classes.filter((className, index, array) => {\n    return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n  }).join(\" \").trim();\n};\nconst hasA11yProp = props => {\n  for (const prop in props) {\n    if (prop.startsWith(\"aria-\") || prop === \"role\" || prop === \"title\") {\n      return true;\n    }\n  }\n};\nexport { hasA11yProp, mergeClasses, toCamelCase, toKebabCase, toPascalCase };","map":{"version":3,"mappings":";;;;;;;AAQa,oBAAeA,MAC1B,WAAOC,QAAQ,oBAAsB,SAAO,EAAEC,WAAY;AAQ/C,oBAAiCF,UAC5CA,MAAO,SAAQ,yBAAyB,CAACG,OAAOC,EAAI,SAClDC,KAAKA,EAAG,cAAgB,MAAGH,WAAY,GACzC;AAQW,qBAAkCF,MAAgC;EACvE,kBAAYM,YAAYN,MAAM;EAE5B,iBAAUO,OAAO,CAAC,EAAEC,aAAgB,aAAUC,MAAM,CAAC;AAC/D;AAQa,qBAAe;EAAA,kCAA2CC,OACrE;IADqEA,OACrE;EAAA;EAAA,eACGC,OAAO,CAACC,WAAWC,OAAOC,KAAU;IAEjC,eAAQF,SAAS,KAChBA,SAAqB,YAAW,EACjC,UAAMG,OAAQ,UAAS,CAAM;EAEjC,CAAC,CACA,MAAK,GAAG,EACRC,IAAK;AAAA;AAQG,oBAAeC,KAA+B;EACzD,WAAWC,QAAQD,KAAO;IACxB,IAAIC,KAAKC,UAAW,QAAO,KAAKD,IAAS,eAAUA,SAAS,OAAS;MAC5D;IACT;EACF;AACF","names":["string","replace","toLowerCase","match","p1","p2","toCamelCase","charAt","toUpperCase","slice","classes","filter","className","index","array","indexOf","trim","props","prop","startsWith"],"sources":["C:\\Users\\Samri\\creator\\creator\\client\\node_modules\\shared\\src\\utils.ts"],"sourcesContent":["import { CamelToPascal } from './utility-types';\n\n/**\n * Converts string to kebab case\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) =>\n  string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\n/**\n * Converts string to camel case\n *\n * @param {string} string\n * @returns {string} A camelized string\n */\nexport const toCamelCase = <T extends string>(string: T) =>\n  string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2) =>\n    p2 ? p2.toUpperCase() : p1.toLowerCase(),\n  );\n\n/**\n * Converts string to pascal case\n *\n * @param {string} string\n * @returns {string} A pascalized string\n */\nexport const toPascalCase = <T extends string>(string: T): CamelToPascal<T> => {\n  const camelCase = toCamelCase(string);\n\n  return (camelCase.charAt(0).toUpperCase() + camelCase.slice(1)) as CamelToPascal<T>;\n};\n\n/**\n * Merges classes into a single string\n *\n * @param {array} classes\n * @returns {string} A string of classes\n */\nexport const mergeClasses = <ClassType = string | undefined | null>(...classes: ClassType[]) =>\n  classes\n    .filter((className, index, array) => {\n      return (\n        Boolean(className) &&\n        (className as string).trim() !== '' &&\n        array.indexOf(className) === index\n      );\n    })\n    .join(' ')\n    .trim();\n\n/**\n * Check if a component has an accessibility prop\n *\n * @param {object} props\n * @returns {boolean} Whether the component has an accessibility prop\n */\nexport const hasA11yProp = (props: Record<string, any>) => {\n  for (const prop in props) {\n    if (prop.startsWith('aria-') || prop === 'role' || prop === 'title') {\n      return true;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}