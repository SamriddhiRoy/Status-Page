{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samri\\\\creator\\\\creator\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Load user when token exists\n//   useEffect(() => {\n//     const loadUser = async () => {\n//       const token = localStorage.getItem('token');\n//       if (token) {\n//         try {\n//           const response = await axios.get('http://localhost:5000/api/auth/me', {\n//             headers: { Authorization: `Bearer ${token}` }\n//           });\n//           setUser(response.data);\n//         } catch (error) {\n//           console.error(\"Error loading user:\", error);\n//           localStorage.removeItem('token'); // Clear invalid token\n//         }\n//       }\n//       setLoading(false);\n//     };\n\n//     loadUser();\n//   }, []);\n\n//   const login = (token, userData) => {\n//     localStorage.setItem('token', token);\n//     setUser(userData);\n//   };\n\n//   const logout = () => {\n//     localStorage.removeItem('token');\n//     setUser(null);\n//   };\n\n//   // New function to update user data\n//   const updateUser = (updatedData) => {\n//     setUser(prevUser => ({\n//       ...prevUser,\n//       ...updatedData\n//     }));\n//   };\n\n//   return (\n//     <AuthContext.Provider \n//       value={{ \n//         user, \n//         loading, \n//         login, \n//         logout,\n//         setUser, // Direct setter\n//         updateUser // Partial updater\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export default AuthContext;\n\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load user data from backend\n  const loadUserData = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await axios.get('http://localhost:5000/api/auth/me', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUser({\n        ...response.data,\n        // Track previous credits for change detection\n        previousCredits: (user === null || user === void 0 ? void 0 : user.credits) || 0\n      });\n    } catch (error) {\n      console.error(\"Error loading user:\", error);\n      localStorage.removeItem('token');\n      setUser(null);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Initial load and token change detection\n  useEffect(() => {\n    loadUserData();\n  }, []);\n  const login = async (token, userData) => {\n    localStorage.setItem('token', token);\n    await loadUserData(); // Refresh user data after login\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n\n  // Enhanced update function with credit tracking\n  const updateUser = async updatedData => {\n    try {\n      // First update local state for immediate UI response\n      setUser(prev => ({\n        ...prev,\n        ...updatedData,\n        previousCredits: (prev === null || prev === void 0 ? void 0 : prev.credits) || 0\n      }));\n\n      // Then verify with server\n      await loadUserData();\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n    }\n  };\n\n  // Force refresh user data from server\n  const refreshUser = async () => {\n    await loadUserData();\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      login,\n      logout,\n      updateUser,\n      refreshUser // Add this new function\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","AuthContext","AuthProvider","children","user","setUser","loading","setLoading","loadUserData","token","localStorage","getItem","response","get","headers","Authorization","data","previousCredits","credits","error","console","removeItem","login","userData","setItem","logout","updateUser","updatedData","prev","refreshUser","useAuth"],"sources":["C:/Users/Samri/creator/creator/client/src/contexts/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n  \r\n//   // Load user when token exists\r\n//   useEffect(() => {\r\n//     const loadUser = async () => {\r\n//       const token = localStorage.getItem('token');\r\n//       if (token) {\r\n//         try {\r\n//           const response = await axios.get('http://localhost:5000/api/auth/me', {\r\n//             headers: { Authorization: `Bearer ${token}` }\r\n//           });\r\n//           setUser(response.data);\r\n//         } catch (error) {\r\n//           console.error(\"Error loading user:\", error);\r\n//           localStorage.removeItem('token'); // Clear invalid token\r\n//         }\r\n//       }\r\n//       setLoading(false);\r\n//     };\r\n\r\n//     loadUser();\r\n//   }, []);\r\n\r\n//   const login = (token, userData) => {\r\n//     localStorage.setItem('token', token);\r\n//     setUser(userData);\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     localStorage.removeItem('token');\r\n//     setUser(null);\r\n//   };\r\n\r\n//   // New function to update user data\r\n//   const updateUser = (updatedData) => {\r\n//     setUser(prevUser => ({\r\n//       ...prevUser,\r\n//       ...updatedData\r\n//     }));\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider \r\n//       value={{ \r\n//         user, \r\n//         loading, \r\n//         login, \r\n//         logout,\r\n//         setUser, // Direct setter\r\n//         updateUser // Partial updater\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default AuthContext;\r\n\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Load user data from backend\r\n    const loadUserData = async () => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.get('http://localhost:5000/api/auth/me', {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            });\r\n            setUser({\r\n                ...response.data,\r\n                // Track previous credits for change detection\r\n                previousCredits: user?.credits || 0\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error loading user:\", error);\r\n            localStorage.removeItem('token');\r\n            setUser(null);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Initial load and token change detection\r\n    useEffect(() => {\r\n        loadUserData();\r\n    }, []);\r\n\r\n    const login = async (token, userData) => {\r\n        localStorage.setItem('token', token);\r\n        await loadUserData(); // Refresh user data after login\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('token');\r\n        setUser(null);\r\n    };\r\n\r\n    // Enhanced update function with credit tracking\r\n    const updateUser = async (updatedData) => {\r\n        try {\r\n            // First update local state for immediate UI response\r\n            setUser(prev => ({\r\n                ...prev,\r\n                ...updatedData,\r\n                previousCredits: prev?.credits || 0\r\n            }));\r\n\r\n            // Then verify with server\r\n            await loadUserData();\r\n        } catch (error) {\r\n            console.error(\"Error updating user:\", error);\r\n        }\r\n    };\r\n\r\n    // Force refresh user data from server\r\n    const refreshUser = async () => {\r\n        await loadUserData();\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                user,\r\n                loading,\r\n                login,\r\n                logout,\r\n                updateUser,\r\n                refreshUser // Add this new function\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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"},"metadata":{},"sourceType":"module"}