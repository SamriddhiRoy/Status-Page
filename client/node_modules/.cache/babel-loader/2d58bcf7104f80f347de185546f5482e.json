{"ast":null,"code":"import _slicedToArray from \"C:/Users/Samri/creator/creator/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/Samri/creator/creator/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Samri/creator/creator/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/Samri/creator/creator/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"color\", \"size\", \"strokeWidth\", \"absoluteStrokeWidth\", \"className\", \"children\", \"iconNode\"];\n/**\n * @license lucide-react v0.511.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\nimport { mergeClasses, hasA11yProp } from './shared/src/utils.js';\nvar Icon = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n    color = _ref$color === void 0 ? \"currentColor\" : _ref$color,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 24 : _ref$size,\n    _ref$strokeWidth = _ref.strokeWidth,\n    strokeWidth = _ref$strokeWidth === void 0 ? 2 : _ref$strokeWidth,\n    absoluteStrokeWidth = _ref.absoluteStrokeWidth,\n    _ref$className = _ref.className,\n    className = _ref$className === void 0 ? \"\" : _ref$className,\n    children = _ref.children,\n    iconNode = _ref.iconNode,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  return createElement(\"svg\", _objectSpread(_objectSpread(_objectSpread({\n    ref: ref\n  }, defaultAttributes), {}, {\n    width: size,\n    height: size,\n    stroke: color,\n    strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n    className: mergeClasses(\"lucide\", className)\n  }, !children && !hasA11yProp(rest) && {\n    \"aria-hidden\": \"true\"\n  }), rest), [].concat(_toConsumableArray(iconNode.map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      tag = _ref3[0],\n      attrs = _ref3[1];\n    return createElement(tag, attrs);\n  })), _toConsumableArray(Array.isArray(children) ? children : [children])));\n});\nexport { Icon as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAwBA,IAAMA,IAAO,cACX,gBAWEC,GAEA;EAAA,sBAXEC,KAAQ;IAARA,KAAQ;IAAA,iBACRC,IAAO;IAAPA,IAAO;IAAA,wBACPC,WAAc;IAAdA,WAAc;IACdC;IAAA,sBACAC,SAAY;IAAZA,SAAY;IACZC;IACAC;IACGC;EAAA,OAILC,cACE;IAEET;EAAA,GACGU;IACHC,KAAO;IACPC,MAAQ;IACRC,MAAQ;IACRV,aAAaC,sBAAuBU,MAAO,YAAW,IAAI,EAAM,UAAOZ,IAAI,CAAI;IAC/EG,WAAWU,YAAa,WAAUV,SAAS;EAAA,GACvC,CAACC,QAAY,KAACU,YAAYR,IAAI,KAAK;IAAE,eAAe;EAAO,IAC5DA,oCAGAD,QAAS,KAAI;IAAA;MAAEU,GAAK;MAAAC,KAAK;IAAA,OAAMT,cAAcQ,GAAK,OAAK,CAAC;EAAA,wBACvDE,KAAM,SAAQb,QAAQ,CAAI,cAAW,CAACA,QAAQ,IAEtD;AAAA,EACJ","names":["Icon","ref","color","size","strokeWidth","absoluteStrokeWidth","className","children","iconNode","rest","createElement","defaultAttributes","width","height","stroke","Number","mergeClasses","hasA11yProp","tag","attrs","Array"],"sources":["C:\\Users\\Samri\\creator\\creator\\client\\node_modules\\lucide-react\\src\\Icon.ts"],"sourcesContent":["import { createElement, forwardRef } from 'react';\nimport defaultAttributes from './defaultAttributes';\nimport { IconNode, LucideProps } from './types';\nimport { mergeClasses, hasA11yProp } from '@lucide/shared';\n\ninterface IconComponentProps extends LucideProps {\n  iconNode: IconNode;\n}\n\n/**\n * Lucide icon component\n *\n * @component Icon\n * @param {object} props\n * @param {string} props.color - The color of the icon\n * @param {number} props.size - The size of the icon\n * @param {number} props.strokeWidth - The stroke width of the icon\n * @param {boolean} props.absoluteStrokeWidth - Whether to use absolute stroke width\n * @param {string} props.className - The class name of the icon\n * @param {IconNode} props.children - The children of the icon\n * @param {IconNode} props.iconNode - The icon node of the icon\n *\n * @returns {ForwardRefExoticComponent} LucideIcon\n */\nconst Icon = forwardRef<SVGSVGElement, IconComponentProps>(\n  (\n    {\n      color = 'currentColor',\n      size = 24,\n      strokeWidth = 2,\n      absoluteStrokeWidth,\n      className = '',\n      children,\n      iconNode,\n      ...rest\n    },\n    ref,\n  ) =>\n    createElement(\n      'svg',\n      {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? (Number(strokeWidth) * 24) / Number(size) : strokeWidth,\n        className: mergeClasses('lucide', className),\n        ...(!children && !hasA11yProp(rest) && { 'aria-hidden': 'true' }),\n        ...rest,\n      },\n      [\n        ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n        ...(Array.isArray(children) ? children : [children]),\n      ],\n    ),\n);\n\nexport default Icon;\n"]},"metadata":{},"sourceType":"module"}