{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Samri\\\\creator\\\\creator\\\\client\\\\src\\\\components\\\\UptimeGraph.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Registering the necessary parts of Chart.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n// The uptime graph component\nconst UptimeGraph = _ref => {\n  let {\n    serviceData\n  } = _ref;\n  const labels = [];\n  const uptimePercentages = [];\n  if (serviceData && serviceData.length > 0) {\n    // Calculate current overall operational percentage\n    const totalServices = serviceData.length;\n    const operationalServices = serviceData.filter(s => s.status === 'Operational').length;\n    const currentUptimeRatio = totalServices > 0 ? operationalServices / totalServices * 100 : 0;\n\n    // This will create a single point on the graph representing the current status\n    labels.push('Current Status');\n    uptimePercentages.push(currentUptimeRatio);\n  } else {\n    // If no service data, show a placeholder point\n    labels.push('No Data');\n    uptimePercentages.push(0); // Show 0% if no data\n  }\n\n  // Chart.js data\n  const data = {\n    labels: labels,\n    datasets: [{\n      label: 'Overall System Uptime (%)',\n      data: uptimePercentages,\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      fill: true,\n      // Fills the area below the line\n      tension: 0.1 // Smoothness of the line\n    }]\n  };\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    // Allows the chart to fill its container\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Service Uptime Status'\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            let label = context.dataset.label || '';\n            if (label) {\n              label += ': ';\n            }\n            if (context.parsed.y !== null) {\n              label += context.parsed.y.toFixed(2) + '%';\n            }\n            return label;\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        // If you add 'chartjs-adapter-date-fns' and historical data, uncomment these:\n        // type: 'time',\n        // time: {\n        //   unit: 'day',\n        //   tooltipFormat: 'PPP',\n        // },\n        // title: {\n        //   display: true,\n        //   text: 'Date',\n        // }\n      },\n      y: {\n        min: 0,\n        max: 100,\n        // Uptime percentage is 0-100\n        title: {\n          display: true,\n          text: 'Uptime (%)'\n        },\n        ticks: {\n          callback: function (value) {\n            return value + '%';\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-6 rounded-lg shadow-md mb-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-4 text-gray-800\",\n      children: \"Service Uptime Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), serviceData && serviceData.length > 0 ?\n    /*#__PURE__*/\n    // Added a fixed height for the chart container for better rendering\n    _jsxDEV(\"div\", {\n      className: \"h-64 md:h-80\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-500 py-10\",\n      children: \"No service data available to display uptime graph. Ensure services are created. For historical uptime, backend changes are needed.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_c = UptimeGraph;\nexport default UptimeGraph;\nvar _c;\n$RefreshReg$(_c, \"UptimeGraph\");","map":{"version":3,"names":["React","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","UptimeGraph","serviceData","labels","uptimePercentages","length","totalServices","operationalServices","filter","s","status","currentUptimeRatio","push","data","datasets","label","borderColor","backgroundColor","fill","tension","options","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","tooltip","callbacks","context","dataset","parsed","y","toFixed","scales","x","min","max","ticks","callback","value"],"sources":["C:/Users/Samri/creator/creator/client/src/components/UptimeGraph.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Registering the necessary parts of Chart.js\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\n// The uptime graph component\r\nconst UptimeGraph = ({ serviceData }) => {\r\n\r\n  const labels = [];\r\n  const uptimePercentages = [];\r\n\r\n  if (serviceData && serviceData.length > 0) {\r\n    // Calculate current overall operational percentage\r\n    const totalServices = serviceData.length;\r\n    const operationalServices = serviceData.filter(s => s.status === 'Operational').length;\r\n    const currentUptimeRatio = totalServices > 0 ? (operationalServices / totalServices) * 100 : 0;\r\n\r\n    // This will create a single point on the graph representing the current status\r\n    labels.push('Current Status');\r\n    uptimePercentages.push(currentUptimeRatio);\r\n\r\n  } else {\r\n    // If no service data, show a placeholder point\r\n    labels.push('No Data');\r\n    uptimePercentages.push(0); // Show 0% if no data\r\n  }\r\n\r\n  // Chart.js data\r\n  const data = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: 'Overall System Uptime (%)',\r\n        data: uptimePercentages,\r\n        borderColor: 'rgba(75, 192, 192, 1)',\r\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n        fill: true, // Fills the area below the line\r\n        tension: 0.1, // Smoothness of the line\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: false, // Allows the chart to fill its container\r\n    plugins: {\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Service Uptime Status',\r\n      },\r\n      tooltip: {\r\n          callbacks: {\r\n              label: function(context) {\r\n                  let label = context.dataset.label || '';\r\n                  if (label) {\r\n                      label += ': ';\r\n                  }\r\n                  if (context.parsed.y !== null) {\r\n                      label += context.parsed.y.toFixed(2) + '%';\r\n                  }\r\n                  return label;\r\n              }\r\n          }\r\n      }\r\n    },\r\n    scales: {\r\n      x: {\r\n        // If you add 'chartjs-adapter-date-fns' and historical data, uncomment these:\r\n        // type: 'time',\r\n        // time: {\r\n        //   unit: 'day',\r\n        //   tooltipFormat: 'PPP',\r\n        // },\r\n        // title: {\r\n        //   display: true,\r\n        //   text: 'Date',\r\n        // }\r\n      },\r\n      y: {\r\n        min: 0,\r\n        max: 100, // Uptime percentage is 0-100\r\n        title: {\r\n          display: true,\r\n          text: 'Uptime (%)',\r\n        },\r\n        ticks: {\r\n            callback: function(value) {\r\n                return value + '%';\r\n            }\r\n        }\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\r\n      <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">Service Uptime Overview</h3>\r\n      {serviceData && serviceData.length > 0 ? (\r\n          // Added a fixed height for the chart container for better rendering\r\n          <div className=\"h-64 md:h-80\"> \r\n              <Line data={data} options={options} />\r\n          </div>\r\n      ) : (\r\n          <p className=\"text-center text-gray-500 py-10\">\r\n            No service data available to display uptime graph. Ensure services are created.\r\n            For historical uptime, backend changes are needed.\r\n          </p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UptimeGraph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}